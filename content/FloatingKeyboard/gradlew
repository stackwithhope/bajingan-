#!/usr/bin/env sh
#
# Copyright 2015 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS=""

APP_NAME="Gradle"
APP_BASE_NAME=`basename "$0"`

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

# For Darwin, add options to specify how the application appears in the dock
# on OS X.
if [ "$(uname)" = "Darwin" ]; then
    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$(dirname "$0")/media/gradle.icns\""
fi

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done
SAVED="`pwd`"
cd "`dirname \"$PRG\"`/" >/dev/null
APP_HOME="`pwd -P`"
cd "$SAVED" >/dev/null

# Ensure that any following actions are safe in the presence of spaces in paths.
# See https://github.com/gradle/gradle/issues/17596
set -o noglob

# Add the project's gradle folder to the path
GRADLE_HOME="$APP_HOME"
# Add the project's gradle/bin folder to the path
export PATH="$GRADLE_HOME/bin:$PATH"

# Set arguments for the wrapper
WRAPPER_JAR="$APP_HOME/gradle/wrapper/gradle-wrapper.jar"
WRAPPER_LAUNCHER=org.gradle.wrapper.GradleWrapperMain

# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum number of open file descriptors on OS X.
if [ "$(uname)" = "Darwin" ]; then
    if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ]; then
        # Use the maximum available.
        MAX_FD=`ulimit -H -n`
    fi
    ulimit -n $MAX_FD
fi

# Collect all arguments for the java command, following the shell quoting and substitution rules
#
# (The code below is a simplified version of the one used by spring-boot's startup scripts)
#
# A naive solution to this problem would be to just use "$@", but that will not consistently
# work when JAVA_OPTS and/or GRADLE_OPTS are not quoted in the same way as the rest of the
# command line arguments.
#
# A better solution is to use an array to collect all arguments and then expand it into
# a single line. That's what we do here.
#
# The loop below will word-split JAVA_OPTS and GRADLE_OPTS and then iterate over the result.
# This is what we want, because it is what the shell will do if JAVA_OPTS is not quoted.
# The 'set -f' option is used to prevent globbing of any of these arguments.
set -f
# We use a temporary file to store the list of arguments, because otherwise we will
# not be able to safely handle arguments with spaces. The list of arguments is built
# by echoing each argument on a new line, and then the file is read line by line.
#
# The arguments are stored in a file instead of an array, because not all shells
# support arrays. In fact, we are using the 'sh' shell, which does not support arrays.
ARGS_FILE=$(mktemp)
echo "$DEFAULT_JVM_OPTS" > "$ARGS_FILE"
for arg in $JAVA_OPTS; do
    echo "$arg" >> "$ARGS_FILE"
done
for arg in $GRADLE_OPTS; do
    echo "$arg" >> "$ARGS_FILE"
done
echo -classpath "$WRAPPER_JAR" "$WRAPPER_LAUNCHER" >> "$ARGS_FILE"
for arg in "$@"; do
    echo "$arg" >> "$ARGS_FILE"
done
# The file is read line by line, and each line is passed to the 'eval' command.
# The 'eval' command will then execute the command, and the 'set --' command will
# set the positional parameters to the result of the command.
#
# The 'set --' command is used to set the positional parameters, because it is the
# only way to safely handle arguments with spaces.
eval set -- "$(cat "$ARGS_FILE")"
rm -f "$ARGS_FILE"
set +f

# Start the wrapper
exec "$JAVACMD" "$@"
